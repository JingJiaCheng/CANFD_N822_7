#if !defined (CAN_BCAN_CFG)
#define CAN_BCAN_CFG

#define CAN_BCAN_CFG_VERSION 0x0100
/* =============================================================================*/
/*                                                                              */
/*                     CONFIDENTIAL VISTEON CORPORATION                         */
/*                                                                              */
/*  This is an unpublished work of authorship, which contains trade secrets,    */
/*  created in 2007.  Visteon Corporation owns all rights to this work and      */
/*  intends to maintain it in confidence to preserve its trade secret status.   */
/*  Visteon Corporation reserves the right, under the copyright laws of the     */
/*  United States or those of any other country that may have jurisdiction, to  */
/*  protect this work as an unpublished work, in the event of an inadvertent    */
/*  or deliberate unauthorized publication.  Visteon Corporation also reserves  */
/*  its rights under all copyright laws to protect this work as a published     */
/*  work, when appropriate.  Those having access to this work may not copy it,  */
/*  use it, modify it or disclose the information contained in it without the   */
/*  written authorization of Visteon Corporation.                               */
/*                                                                              */
/* =============================================================================*/

/* =============================================================================*/
/*                                                                              */
/*  Name:           can_bcan.cfg                                                */
/*                                                                              */
/*  Description:    CAN Driver Basic Controller Configuration File              */
/*                                                                              */
/*                  This file contains configuration parameters that specify    */
/*                  the basic configuration of the CAN driver and controller    */
/*                  features. For most so-called "Basic" CAN controllers,       */
/*                  this file fully specifies the driver configuration. So-     */
/*                  called "Full/FD" CAN controllers, which have multiple,      */
/*                  independent transmit and receive buffers (also called       */
/*                  "slots" or "mailboxes" will require an additional           */
/*                  configuration file ("can_canfd.cfg") to specify the         */
/*                  configuration and properties of individual transmit and     */
/*                  receive buffers.                                            */
/*                                                                              */
/*  Organization:   Multiplex Core Technology                                   */
/*                                                                              */
/* =============================================================================*/
#include "abstract.h"
/* ===========================================================================*/
/*  C O N F I G U R A T I O N   M A C R O   D E F I N I T I O N S             */
/* ===========================================================================*/





/* ===========================================================================*/
/*                                                                            */
/* Name(s):         CAN_NUM_INSTANCES                                         */
/*                                                                            */
/* Description:     Number of CAN Controller Instantiations                   */
/*                                                                            */
/*                  This parameter defines the number of CAN controller       */
/*                  instantiations supported by the driver. A range of 1 to   */
/*                  5 controller instantiations is presently supported by     */
/*                  the driver design.                                        */
/*                                                                            */
/* Templates:       #define CAN_NUM_INSTANCES   2                             */
/*                                                                            */
/* Assumptions:     All of the CAN controllers are of the same type and have  */
/*                  the same register interface.                              */
/*                                                                            */
/*                                                                            */
/* ===========================================================================*/
#define CAN_NUM_INSTANCES (1)

/* ============================================================================*/
/*                                                                             */
/* Name:            CAN_PAD_BYTE                                               */
/*                                                                             */
/* Description:     This parameter specifies the unsigned 8-bit pad character  */
/*                  used to pad CAN frames out to the full CAN message length  */
/*                  (DLC = 8) if message padding is specified. The message     */
/*                  padding option is enabled for a given message by           */
/*                  setting the CANB_TX_PAD_DATA flag bit in the TMD "Options" */
/*                  element to "1".                                            */
/*                                                                             */
/* Template:        #define CAN_PAD_BYTE  0xFF                                 */
/*                                                                             */
/* ============================================================================*/
#define CAN_PAD_BYTE   (0xFFu)


#if (CAN_NUM_INSTANCES > 0)

/* ===========================================================================*/
/*                                                                            */
/*  CAN BIT TIMING                                                            */
/*                                                                            */
/* ===========================================================================*/

/* ==============================================================================*/
/*                                                                               */
/* Name(s):         CAN_SYSTEM_CLOCK_DIVIDE                                      */
/*                                                                               */
/* Description:     Define the clock divider applied to the system clock         */
/*                  used to derive the flexcan clock. This is not to be          */
/*                  confused with the BRP setting defined below. Use of this     */
/*                  parameter and the allowable range of values is hardware      */
/*                  specific. As an example, for the ColdFire FlexCAN parameter, */ 
/*                  the range of possible values is 0 to 255.                    */
/*                                                                               */
/* Template(s):     #define CAN_SYSTEM_CLOCK_DIVIDE (4)                          */
/*                                                                               */
/* ==============================================================================*/
#define CAN0_SYSTEM_CLOCK_DIVIDE     (0x1u)


/* =================================================================================*/
/*                                                                                  */
/* Name(s):         CAN_TSEG1                                                       */
/*                  CAN_TSEG2                                                       */
/*                  CAN_SJW                                                         */
/*                  CAN_PROPSEG                                                     */
/*                                                                                  */
/*                                                                                  */
/* Description:     CAN Bit Timing Parameters                                       */
/*                                                                                  */
/*                  A CAN bit period time quantum is simply the inverse of          */
/*                  the clock frequency used to clock the CAN controller.           */
/*                                                                                  */
/*                  CAN_PROPSEG                                                     */
/*                                                                                  */
/*                  This parameter defines the length of the propagation            */
/*                  segment in bit time.                                            */
/*                                                                                  */
/*                  CAN_PSEG1                                                       */
/*                                                                                  */
/*                  This parameter defines the length of Phase Buffer Segment 1 in  */
/*			 the bit time.                                                              */
/*                                                                                  */
/*                  CAN_PSEG2                                                       */
/*                                                                                  */
/*                  This parameter defines the number of time quanta in the         */
/*                  bit period between the primary sample point and the end         */
/*                  of the bit period.                                              */
/*                                                                                  */
/*                  CAN_SJW                                                         */
/*                                                                                  */
/*                  This parameter defines the number of time quanta by which       */
/*                  a bit period may be lengthened or shortened to allow            */
/*                  different nodes on the bus to better synchronize to each        */
/*                  other.                                                          */
/*                                                                                  */
/*                  CAN_NSAMP                                                       */
/*                                                                                  */
/*                  This parameter defines the number of sample points in the       */
/*                  CAN bit period. Either 1 or 3 samples are allowed.              */
/*                  The OEM specifies the sample point configuration. In            */
/*                  general, only 1 sample point is specified for bit rates         */
/*                  greater than 100 KBPS.                                          */
/*                                                                                  */
/*                                                                                  */
/*                  In the FreeScale ColdFire CAN Controller, the                   */
/*                  CAN bit rate is given by:                                       */
/*                                                                                  */
/*          BIT RATE = CRIN / [(CAN_SYSTEM_CLOCK_DIVIDE+1) x ( No of Time Quanta )] */
/*                                                                                  */
/*                  The Clock source can either by the SYSCLK or CRIN               */
/*                  The location of the primary sample point in the bit period      */
/*                  is determined by the ratio of TSEG1 and TSEG2. The percentage   */
/*                  delay from the start of the bit period to the sample point      */
/*                  relative to the total bit period is given by:                   */
/*                                                                                  */
/*          Sample Point (%) = 100 x [TSEG1 + 1]/[TSEG1 + TSEG2 + 1]                */
/*                                                                                  */
/*                  In general the SJW must not be larger than the smaller          */
/*                  of TSEG1 or TSEG2. Usually TSEG1 is greater than TSEG2,         */
/*                  and therefore SJW <= TSEG2.                                     */
/*                                                                                  */
/*                                                                                  */
/*      Example:    CRIN = 11MHz; SYSCLK = 48 MHz                                   */
/*                  #define CAN_SYSTEM_CLOCK_DIVIDE 6                               */
/*                  #define CAN_PROPSEG             	2                             */
/*                  #define CAN_TSEG1              	4                               */
/*                  #define CAN_TSEG2               	2                             */
/*                  #define CAN_SJW                 	1                             */
/*               	 #define CAN_NSAMP	   		1                                       */
/*                                                                                  */
/*                  No of Time Quanta = SYNC_SEG + Time Segment 1 + Time Segment 2  */
/*                                                                                  */
/*                           SYNC_SEG = 1                                           */
/*                  Time Segment 1 = CAN_PROPSEG + CAN_TSEG1 + 2                    */
/*                  Time Segment 1 = CAN_TSEG2 + 1                                  */
/*                                                                                  */
/*        Therefore No of Time Quanta = 17 Time Quanta = 1 Bit Time                 */
/*                                                                                  */
/*          BIT RATE = SYSCLK / [(7 + 1) x (12)]                                    */
/*                   = 500 KBPS                                                     */
/*                                                                                  */
/*                                                                                  */
/*                                                                                  */
/* =================================================================================*/

/* Configured for 500kbps */

#define CAN0_PSEG1     (0x0Bu)
#define CAN0_PSEG2     (0x02u)
#define CAN0_SJW       (0x02u) 
	

/* ===================================================================================*/
/*                                                                                    */
/* Name(s):         PLL_ENABLE                                                        */
/*                  CAN_PRESCALAR                                                     */
/*                  PLL_CLOCK                                                         */
/*                  MAIN_CLOCK                                                        */
/*                                                                                    */
/* Description:     Clock selection parameters                                        */
/*                                                                                    */
/*                  PLL_ENABLE                                                        */
/*                  This parameter should be defined for using PLL clock              */
/*                                                                                    */
/*                  CAN_PRESCALAR                                                     */
/*                  This parameter defines prescalar value for input clock            */
/*                  (Main clock or PLL clock)                                         */	
/*                  CAN_PRESCALAR = Actual value - 1u                                 */
/* Template(s):     #define CAN_PRESCALAR (59u)  for value of 60u                     */
/*                                                                                    */
/* Example:         CAN clock configuration through PLL0                              */
/*                  CAN Clock = (PLL0ISEL / PLL0DIVL) * PLL0DIVN * (1/CAN_PRESCALAR)  */
/*                  PLL0ISEL  = 4MHz (Main clock)                                     */
/*                  PLL0DIVL  = 1                                                     */
/*                  PLL0DIVN  = 120                                                   */
/*                  CAN_PRESCALAR    = 60                                             */
/*                  CAN Clock = (4MHz / 1) * 120 * (1/60) => 8MHz                     */          
/* ===================================================================================*/
//define PLL_ENABLE
#define CAN_PRESCALAR  (0u)
#define PLL_CLOCK      (0u) 
#define MAIN_CLOCK     (1u) 

#endif

/*=========================================================================*/

/* Base Address of CAN Channel (CAN-FD 0) */
#define CPG_CANFD1	(*((volatile pstc_canfd_type_t*)0xB4910000))

/* Address of Message RAM (CAN-FD 0) */
#define	CANFD1MSGRAM    (0xB4918000ul) /*channel 1*/

#endif /* CAN_BCAN_CFG */

/* End of file ============================================================ */

