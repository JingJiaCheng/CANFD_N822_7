/******************************************************************************
 * $Revision: 8549 $
 * $Date:: 2014-12-01 12:22:48 +0100#$
 *****************************************************************************/
/* __DISCLAIMER_START__                                                      */
/******************************************************************************
* Copyright (C) 2014 Spansion LLC. All Rights Reserved. 
*
* This software is owned and published by: 
* Spansion LLC, 915 DeGuigne Dr. Sunnyvale, CA  94088-3453 ("Spansion").
*
* BY DOWNLOADING, INSTALLING OR USING THIS SOFTWARE, YOU AGREE TO BE BOUND 
* BY ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT.
*
* This software contains source code for use with Spansion 
* components. This software is licensed by Spansion to be adapted only 
* for use in systems utilizing Spansion components. Spansion shall not be 
* responsible for misuse or illegal use of this software for devices not 
* supported herein.  Spansion is providing this software "AS IS" and will 
* not be responsible for issues arising from incorrect user implementation 
* of the software.  
*
* SPANSION MAKES NO WARRANTY, EXPRESS OR IMPLIED, ARISING BY LAW OR OTHERWISE,
* REGARDING THE SOFTWARE (INCLUDING ANY ACOOMPANYING WRITTEN MATERIALS), 
* ITS PERFORMANCE OR SUITABILITY FOR YOUR INTENDED USE, INCLUDING, 
* WITHOUT LIMITATION, THE IMPLIED WARRANTY OF MERCHANTABILITY, THE IMPLIED 
* WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE OR USE, AND THE IMPLIED 
* WARRANTY OF NONINFRINGEMENT.  
* SPANSION SHALL HAVE NO LIABILITY (WHETHER IN CONTRACT, WARRANTY, TORT, 
* NEGLIGENCE OR OTHERWISE) FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT 
* LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, 
* LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY LOSS) ARISING FROM USE OR 
* INABILITY TO USE THE SOFTWARE, INCLUDING, WITHOUT LIMITATION, ANY DIRECT, 
* INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL DAMAGES OR LOSS OF DATA, 
* SAVINGS OR PROFITS, 
* EVEN IF SPANSION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 
* YOU ASSUME ALL RESPONSIBILITIES FOR SELECTION OF THE SOFTWARE TO ACHIEVE YOUR
* INTENDED RESULTS, AND FOR THE INSTALLATION OF, USE OF, AND RESULTS OBTAINED 
* FROM, THE SOFTWARE.  
*
* This software may be replicated in part or whole for the licensed use, 
* with the restriction that this Disclaimer and Copyright notice must be 
* included with each copy of this software, whether used in part or whole, 
* at all times.
******************************************************************************/
/* __DISCLAIMER_END__                                                        */
/*****************************************************************************
 ** \file pdl.h
 **
 ** Headerfile for Traveo Peripheral Driver Library 
 **
 ** History:
 **   - 2014-06-22  0.01  HS  Initial version for Traveo
 **   - 2014-06-27  0.02  HS  Change  DMB() from __asm("DMB") for compatibility
 **                           between GHS and IAR
 **                           Add definition for LIN module.
 **   - 2014-11-5   0.03  ST  Add definition for ADC12B module.
 **                           Remove definition for ADC module.
 *****************************************************************************/

#ifndef __PDL_H__
#define __PDL_H__

/*****************************************************************************/
/* Include files                                                             */
/*****************************************************************************/
#include "base_types.h"
#include "mcu_settings.h"

/* C binding of definitions if building with C++ compiler */
#ifdef __cplusplus
extern "C"
{
#endif

/*****************************************************************************/
/* Global pre-processor symbols/macros ('define')                            */
/*****************************************************************************/
/**
 ******************************************************************************
 ** All definitions needed for pdl_user.h are stated here 
 ******************************************************************************/ 
#define PDL_ON                1    /*!< Switches a feature on. */
#define PDL_OFF               0    /*!< Switches a feature off. */
#define PDL_WAIT_LOOP_HOOK()  Pdl_WaitLoopHook()
/**
 ******************************************************************************
 ** User Defines for PDL resource activation
 **
 ** Possible definitions are PDL_ON and PDL_OFF.
 **
 ******************************************************************************/

/******************************************************************************/
/* User Setting Include file                                                  */
/******************************************************************************/
#include "pdl_user.h"  /* MUST be included here! */

/**
 ******************************************************************************
 ** PDL resource enable check
 ** 
 ** \note It does not check, if a device has actually any in pdl.h enabled
 **       resource and all instances available!
 **
 ******************************************************************************/

/* Activate code in hsspi.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_HSSPI0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_GFXSPI == PDL_ON)
    #define PDL_PERIPHERAL_HSSPI_ACTIVE
    #include "hsspi.h"
#endif

/* Activate code in mfs_I2C.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_I2C0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C4 == PDL_ON)
    /* || 
    (PDL_PERIPHERAL_ENABLE_I2C5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C6 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C7 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C11 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C12 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C13 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C14 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C15 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C16 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C17 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C18 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C19 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C20 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_I2C21 == PDL_ON)*/
    #define PDL_PERIPHERAL_I2C_ACTIVE
    #include "mfs_i2c.h"
#endif

/* Activate code in adc12b.c if one or more are set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_ADC12B == PDL_ON)
    #define PDL_PERIPHERAL_ADC12B_ACTIVE
    #include "adc12b.h"
#endif

/* Activate code in work_flash.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_WFLASH == PDL_ON)
    #define PDL_PERIPHERAL_WFLASH_ACTIVE
    #include "workflash.h"
#endif

/* Activate code in frt.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_FRT0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT6 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT7 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_FRT11 == PDL_ON)
    #define PDL_PERIPHERAL_FRT_ACTIVE
    #include "frt.h"
#endif

/* Activate code in cpu.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_CPU == PDL_ON)
    #define PDL_PERIPHERAL_CPU_ACTIVE
    #include "cpu.h"
#endif

/* Activate code in mem.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_MEM == PDL_ON)
    #define PDL_PERIPHERAL_MEM_ACTIVE
    #include "mem.h"
#endif

/* Activate code in sysctrl.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_SYSCTRL == PDL_ON)
    #define PDL_PERIPHERAL_SYSCTRL_ACTIVE
    #include "sysctrl.h"
#endif

/* Activate code in port.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_PORT == PDL_ON)
    #define PDL_PERIPHERAL_PORT_ACTIVE
	#include "port.h"
#endif

/* Activate code in hwdg.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_HWDG == PDL_ON)
    #define PDL_PERIPHERAL_HWDG_ACTIVE
    #include "hwdg.h"
#endif

/* Activate code in swdg.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_SWDG == PDL_ON)
    #define PDL_PERIPHERAL_SWDG_ACTIVE
    #include "swdg.h"
#endif

/* Activate code in mfs_uart.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_UART0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART11 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART12 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART16 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_UART17 == PDL_ON)
    #define PDL_PERIPHERAL_UART_ACTIVE
    #include "mfs_uart.h"
#endif

/* Activate code in mfs_lin.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_LIN0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN11 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN12 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN16 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_LIN17 == PDL_ON)
    #define PDL_PERIPHERAL_LIN_ACTIVE
    #include "mfs_lin.h"
#endif

/* Activate code in canfd.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_CANFD0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_CANFD1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_CANFD5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_CANFD6 == PDL_ON)
    #define PDL_PERIPHERAL_CANFD_ACTIVE
//    #include "canfd.h"
#endif

/* Activate code in bt_pwm.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_PWM0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM6 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM7 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM11 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM12 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM13 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM14 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM15 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM16 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM17 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM18 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM19 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM20 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM21 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM22 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_PWM23 == PDL_ON)
    #define PDL_PERIPHERAL_PWM_ACTIVE
    #include "bt_pwm.h"
#endif

/* Activate code in bt_rlt.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_RLT0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT6 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT7 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT11 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT12 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT13 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT14 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT15 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT16 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT17 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT18 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT19 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT20 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT21 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT22 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_RLT23 == PDL_ON)
    #define PDL_PERIPHERAL_RLT_ACTIVE
    #include "bt_rlt.h"
#endif

/* Activate code in icu.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_ICU0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU6 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU7 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_ICU11 == PDL_ON)
    #define PDL_PERIPHERAL_ICU_ACTIVE
    #include "icu.h"
#endif

/* Activate code in eic.c if set to PDL_ON */
#if (PDL_PERIPHERAL_ENABLE_EIC0 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC1 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC2 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC3 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC4 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC5 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC6 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC7 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC8 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC9 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC10 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC11 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC12 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC13 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC14 == PDL_ON) || \
    (PDL_PERIPHERAL_ENABLE_EIC15 == PDL_ON)
    #define PDL_PERIPHERAL_EIC_ACTIVE
    #include "eic.h"
#endif


/**
 ******************************************************************************
 ** Interrupt vector definitions
 ******************************************************************************/
/** ADC12B **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_ADC12B == PDL_ON)
    #define PDL_IRQ_ISR_ADC12B_EOF      (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ADC12B_GRP      (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ADC12B_PULSE    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ADC12B_RCO      (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ADC12B_EOF      (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ADC12B_GRP      (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ADC12B_PULSE    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ADC12B_RCO      (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

/** WFLASH *******************************************************************/
#if (PDL_PERIPHERAL_ENABLE_WFLASH == PDL_ON)
#else
#endif

/** FRT **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_FRT0 == PDL_ON)
    #define PDL_IRQ_ISR_FRT0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT1 == PDL_ON)
    #define PDL_IRQ_ISR_FRT1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT2 == PDL_ON)
    #define PDL_IRQ_ISR_FRT2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT3 == PDL_ON)
    #define PDL_IRQ_ISR_FRT3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT4 == PDL_ON)
    #define PDL_IRQ_ISR_FRT4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT5 == PDL_ON)
    #define PDL_IRQ_ISR_FRT5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT6 == PDL_ON)
    #define PDL_IRQ_ISR_FRT6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT7 == PDL_ON)
    #define PDL_IRQ_ISR_FRT7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT8 == PDL_ON)
    #define PDL_IRQ_ISR_FRT8    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT8    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT9 == PDL_ON)
    #define PDL_IRQ_ISR_FRT9    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT9    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT10 == PDL_ON)
    #define PDL_IRQ_ISR_FRT10    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT10    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_FRT11 == PDL_ON)
    #define PDL_IRQ_ISR_FRT11    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_FRT11    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

/** CPU ***********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_CPU == PDL_ON)
#else
#endif

/** MEM ***********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_MEM == PDL_ON)
#else
#endif

/** Port **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_PORT == PDL_ON)
#else
#endif

/** HWDG **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_HWDG == PDL_ON)
    #define PDL_IRQ_ISR_HWDG        (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_NMI_ISR_HWDG        (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_HWDG        (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_NMI_ISR_HWDG        (INTERRUPTS_NMI_DEFAULT_HANDLER)
#endif

/** SWDG **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_SWDG == PDL_ON)
    #define PDL_IRQ_ISR_SWDG        (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_NMI_ISR_SWDG        (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_SWDG        (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_NMI_ISR_SWDG        (INTERRUPTS_NMI_DEFAULT_HANDLER)
#endif

/** UART/LIN/I2C **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_UART0 == PDL_ON)
    #define PDL_IRQ_ISR_MFS0_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN0 == PDL_ON)
    #define PDL_IRQ_ISR_MFS0_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C0 == PDL_ON)
    #define PDL_IRQ_ISR_MFS0_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS0_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS0_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART1 == PDL_ON)
    #define PDL_IRQ_ISR_MFS1_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN1 == PDL_ON)
    #define PDL_IRQ_ISR_MFS1_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C1 == PDL_ON)
    #define PDL_IRQ_ISR_MFS1_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS1_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS1_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART2 == PDL_ON)
    #define PDL_IRQ_ISR_MFS2_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN2 == PDL_ON)
    #define PDL_IRQ_ISR_MFS2_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C2 == PDL_ON)
    #define PDL_IRQ_ISR_MFS2_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS2_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS2_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART3 == PDL_ON)
    #define PDL_IRQ_ISR_MFS3_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN3 == PDL_ON)
    #define PDL_IRQ_ISR_MFS3_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C3 == PDL_ON)
    #define PDL_IRQ_ISR_MFS3_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS3_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS3_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART4 == PDL_ON)
    #define PDL_IRQ_ISR_MFS4_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN4 == PDL_ON)
    #define PDL_IRQ_ISR_MFS4_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C4 == PDL_ON)
    #define PDL_IRQ_ISR_MFS4_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS4_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS4_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART8 == PDL_ON)
    #define PDL_IRQ_ISR_MFS8_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN8 == PDL_ON)
    #define PDL_IRQ_ISR_MFS8_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C8 == PDL_ON)
    #define PDL_IRQ_ISR_MFS8_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS8_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS8_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART9 == PDL_ON)
    #define PDL_IRQ_ISR_MFS9_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN9 == PDL_ON)
    #define PDL_IRQ_ISR_MFS9_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C9 == PDL_ON)
    #define PDL_IRQ_ISR_MFS9_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS9_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS9_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART10 == PDL_ON)
    #define PDL_IRQ_ISR_MFS10_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN10 == PDL_ON)
    #define PDL_IRQ_ISR_MFS10_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C10 == PDL_ON)
    #define PDL_IRQ_ISR_MFS10_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS10_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS10_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART11 == PDL_ON)
    #define PDL_IRQ_ISR_MFS11_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN11 == PDL_ON)
    #define PDL_IRQ_ISR_MFS11_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C11 == PDL_ON)
    #define PDL_IRQ_ISR_MFS11_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS11_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS11_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART12 == PDL_ON)
    #define PDL_IRQ_ISR_MFS12_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN12 == PDL_ON)
    #define PDL_IRQ_ISR_MFS12_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C12 == PDL_ON)
    #define PDL_IRQ_ISR_MFS12_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS12_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS12_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART16 == PDL_ON)
    #define PDL_IRQ_ISR_MFS16_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN16 == PDL_ON)
    #define PDL_IRQ_ISR_MFS16_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C16 == PDL_ON)
    #define PDL_IRQ_ISR_MFS16_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS16_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS16_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_UART17 == PDL_ON)
    #define PDL_IRQ_ISR_MFS17_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_LIN17 == PDL_ON)
    #define PDL_IRQ_ISR_MFS17_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_I2C17 == PDL_ON)
    #define PDL_IRQ_ISR_MFS17_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_MFS17_TX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_RX    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_MFS17_ERR   (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

/** CAN-FD **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_CANFD0 == PDL_ON)
    #define PDL_IRQ_ISR_CANFD0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_CANFD0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif
#if (PDL_PERIPHERAL_ENABLE_CANFD1 == PDL_ON)
    #define PDL_IRQ_ISR_CANFD1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_CANFD1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif
#if (PDL_PERIPHERAL_ENABLE_CANFD5 == PDL_ON)
    #define PDL_IRQ_ISR_CANFD5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_CANFD5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif
#if (PDL_PERIPHERAL_ENABLE_CANFD6 == PDL_ON)
    #define PDL_IRQ_ISR_CANFD6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_CANFD6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

/** Base Timer (PWM & RLT) **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_PWM0 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_PWM8 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_PWM9 == PDL_ON) \
    || (PDL_PERIPHERAL_ENABLE_PWM10 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_PWM11 == PDL_ON)
    #define PDL_IRQ_ISR_BT0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT0 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_RLT8 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_RLT9 == PDL_ON) \
    || (PDL_PERIPHERAL_ENABLE_RLT10 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_RLT11 == PDL_ON)
    #define PDL_IRQ_ISR_BT0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM1 == PDL_ON)
    #define PDL_IRQ_ISR_BT1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT1 == PDL_ON)
    #define PDL_IRQ_ISR_BT1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM2 == PDL_ON)
    #define PDL_IRQ_ISR_BT2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT2 == PDL_ON)
    #define PDL_IRQ_ISR_BT2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM3 == PDL_ON)
    #define PDL_IRQ_ISR_BT3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT3 == PDL_ON)
    #define PDL_IRQ_ISR_BT3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM4 == PDL_ON)
    #define PDL_IRQ_ISR_BT4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT4 == PDL_ON)
    #define PDL_IRQ_ISR_BT4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM5 == PDL_ON)
    #define PDL_IRQ_ISR_BT5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT5 == PDL_ON)
    #define PDL_IRQ_ISR_BT5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM6 == PDL_ON)
    #define PDL_IRQ_ISR_BT6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT6 == PDL_ON)
    #define PDL_IRQ_ISR_BT6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM7 == PDL_ON)
    #define PDL_IRQ_ISR_BT7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT7 == PDL_ON)
    #define PDL_IRQ_ISR_BT7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM12 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_PWM20 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_PWM21 == PDL_ON) \
    || (PDL_PERIPHERAL_ENABLE_PWM22 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_PWM23 == PDL_ON)
    #define PDL_IRQ_ISR_BT12    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT12 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_RLT20 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_RLT21 == PDL_ON) \
    || (PDL_PERIPHERAL_ENABLE_RLT22 == PDL_ON) || (PDL_PERIPHERAL_ENABLE_RLT23 == PDL_ON)
    #define PDL_IRQ_ISR_BT12    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT12    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM13 == PDL_ON)
    #define PDL_IRQ_ISR_BT13    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT13 == PDL_ON)
    #define PDL_IRQ_ISR_BT13    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT13    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM14 == PDL_ON)
    #define PDL_IRQ_ISR_BT14    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT14 == PDL_ON)
    #define PDL_IRQ_ISR_BT14    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT14    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM15 == PDL_ON)
    #define PDL_IRQ_ISR_BT15    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT15 == PDL_ON)
    #define PDL_IRQ_ISR_BT15    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT15    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM16 == PDL_ON)
    #define PDL_IRQ_ISR_BT16    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT16 == PDL_ON)
    #define PDL_IRQ_ISR_BT16    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT16    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM17 == PDL_ON)
    #define PDL_IRQ_ISR_BT17    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT17 == PDL_ON)
    #define PDL_IRQ_ISR_BT17    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT17    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM18 == PDL_ON)
    #define PDL_IRQ_ISR_BT18    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT18 == PDL_ON)
    #define PDL_IRQ_ISR_BT18    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT18    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_PWM19 == PDL_ON)
    #define PDL_IRQ_ISR_BT19    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#elif (PDL_PERIPHERAL_ENABLE_RLT19 == PDL_ON)
    #define PDL_IRQ_ISR_BT19    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_BT19    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif


/** ICU **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_ICU0 == PDL_ON)
    #define PDL_IRQ_ISR_ICU0_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU0_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU0_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU0_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU1 == PDL_ON)
    #define PDL_IRQ_ISR_ICU1_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU1_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU1_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU1_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU2 == PDL_ON)
    #define PDL_IRQ_ISR_ICU2_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU2_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU2_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU2_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU3 == PDL_ON)
    #define PDL_IRQ_ISR_ICU3_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU3_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU3_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU3_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU4 == PDL_ON)
    #define PDL_IRQ_ISR_ICU4_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU4_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU4_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU4_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU5 == PDL_ON)
    #define PDL_IRQ_ISR_ICU5_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU5_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU5_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU5_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU6 == PDL_ON)
    #define PDL_IRQ_ISR_ICU6_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU6_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU6_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU6_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU7 == PDL_ON)
    #define PDL_IRQ_ISR_ICU7_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU7_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU7_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU7_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU8 == PDL_ON)
    #define PDL_IRQ_ISR_ICU8_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU8_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU8_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU8_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU9 == PDL_ON)
    #define PDL_IRQ_ISR_ICU9_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU9_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU9_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU9_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU10 == PDL_ON)
    #define PDL_IRQ_ISR_ICU10_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU10_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU10_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU10_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_ICU11 == PDL_ON)
    #define PDL_IRQ_ISR_ICU11_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU11_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_ICU11_0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
    #define PDL_IRQ_ISR_ICU11_1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

/** EIC **********************************************************************/
#if (PDL_PERIPHERAL_ENABLE_EIC0 == PDL_ON)
    #define PDL_IRQ_ISR_EIC0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC0    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC1 == PDL_ON)
    #define PDL_IRQ_ISR_EIC1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC1    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC2 == PDL_ON)
    #define PDL_IRQ_ISR_EIC2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC2    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC3 == PDL_ON)
    #define PDL_IRQ_ISR_EIC3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC3    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC4 == PDL_ON)
    #define PDL_IRQ_ISR_EIC4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC4    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC5 == PDL_ON)
    #define PDL_IRQ_ISR_EIC5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC5    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC6 == PDL_ON)
    #define PDL_IRQ_ISR_EIC6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC6    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC7 == PDL_ON)
    #define PDL_IRQ_ISR_EIC7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC7    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC8 == PDL_ON)
    #define PDL_IRQ_ISR_EIC8    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC8    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC9 == PDL_ON)
    #define PDL_IRQ_ISR_EIC9    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC9    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC10 == PDL_ON)
    #define PDL_IRQ_ISR_EIC10    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC10    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC11 == PDL_ON)
    #define PDL_IRQ_ISR_EIC11    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC11    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC12 == PDL_ON)
    #define PDL_IRQ_ISR_EIC12    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC12    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC13 == PDL_ON)
    #define PDL_IRQ_ISR_EIC13    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC13    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC14 == PDL_ON)
    #define PDL_IRQ_ISR_EIC14    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC14    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif

#if (PDL_PERIPHERAL_ENABLE_EIC15 == PDL_ON)
    #define PDL_IRQ_ISR_EIC15    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#else
    #define PDL_IRQ_ISR_EIC15    (INTERRUPTS_IRQ_DEFAULT_HANDLER)
#endif



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


#include "pdl_intern.h"      // This include must be put always after the PDL_DET_CUSTOM and PDL_PERIPHERAL section!



/**
 *****************************************************************************
 ** \defgroup PDLMacroGroup General PDL macros
 ** \brief This section describes the interface for the PDL General macros
 **
 ** Provided functions of General PDL macros:
 **
 ** - PDL_WRITE_REG_SYNC()
 ** - PDL_SAFELY_DISABLE_INTERRUPT()
 ** 
 ** For more detail, see PDL_WRITE_REG_SYNC(), PDL_SAFELY_DISABLE_INTERRUPT()
 ** sections.
 *****************************************************************************/
/*@{ */

/**
 *****************************************************************************
 ** Including mechanism to synchronously write the register,
 ** including all latency time of bus bridges.
 ** This is ensured by reading back the register which will force the CPU to
 ** wait until the write/read-back operation is completed. Reading an address
 ** on the same bus as written before, will stall the CPU until all pending
 ** write operations in CPU write buffer to strictly ordered memory areas like
 ** I/O registers are completed.
 **
 ** This macro should be used to ensure a safe clearing of interrupt flags
 ** before returning from the ISR, to prevent ISR double execution in case of
 ** not-yet-cleared interrupt flags in a peripheral.
 **
 ** Typically the appropriate clear register is used to clear the
 ** interrupt status flag of a peripheral.
 **
 ** See Cortex-R5 TRM Appendix-D D.1 Memory ordering
 **
 *****************************************************************************/
#define PDL_WRITE_REG_SYNC(Register, val)   \
        {                                   \
            (Register) = (val);                 \
            (Register);                       \
            DMB();                          \
        }

/**
 *****************************************************************************
 ** Macro for synchronously disabling an interrupt of a peripheral
 ** including all latency time of bus bridges, interrupt status
 ** signal to the Interrupt Controller and interrupt priority evaluation.
 ** This macro should be used to ensure a safe, interrupt protected
 ** code execution after execution of this macro.
 **
 ** Typically the appropriate clear register is used to clear the
 ** interrupt enable flag of a peripheral.
 *****************************************************************************/
#define PDL_SAFELY_DISABLE_INTERRUPT(Register, val)     \
        {                                               \
            (Register) = (val);                             \
            (Register);                                   \
            NOP(); NOP(); NOP(); NOP(); NOP(); NOP();   \
        }

/*@} */


/*****************************************************************************/
/* Global type definitions ('typedef')                                       */
/*****************************************************************************/


/*****************************************************************************/
/* Global variable declarations ('extern', definition in C source)           */
/*****************************************************************************/


/*****************************************************************************/
/* Global function prototypes ('extern', definition in C source)             */
/*****************************************************************************/


/*****************************************************************************/
/* Global function prototypes                                                */
/*****************************************************************************/

/**
 ******************************************************************************
 ** This hook is part of wait loops.
 ******************************************************************************/
extern void Pdl_WaitLoopHook(void) ;

#ifdef __cplusplus
}
#endif

#endif /* __PDL_H__ */
