
#ifndef WDG_66_IA_CFG_ARCH_H
#define WDG_66_IA_CFG_ARCH_H 1

/** \brief AUTOSAR Wdg Driver
 **
 ** This file contains API definitions of the configuration of the
 ** AUTOSAR module Wdg that is target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL40-DRV
 **
 ** (c) 2014-2017, Cypress Semiconductor Corporation. All rights reserved.
 **
 ** Warranty and Disclaimer
 **
 ** This software product is property of Cypress Semiconductor Corporation or
 ** its subsidiaries.
 ** Any use and/or distribution rights for this software product are provided
 ** only under the Cypress Software License Agreement.
 ** Any use and/or distribution of this software product not in accordance with
 ** the terms of the Cypress Software License Agreement are unauthorized and
 ** shall constitute an infringement of Cypress intellectual property rights.
*/


/*==================[inclusions]=============================================*/

#include <TSAutosar.h> /* Cypress specific standard types */
#include <Std_Types.h> /* AUTOSAR standard types */
#include <Wdg_66_IA_Types_Der.h>

/*==================[macros]=================================================*/

/*--------------------- Information of Register -----------------------------*/

#ifndef __MCAL_IO_DEFINE
#define WDG_REG_ADDR_HWDG ( (P2VAR(Wdg_66_IA_RegsType, WDG_CONST, REGSPACE)) 0xB060C000U )   /* Hardware watchdog base address */
#define WDG_REG_ADDR_SWDG ( (P2VAR(Wdg_66_IA_RegsType, WDG_CONST, REGSPACE)) 0xB0308000U )   /* Software watchdog base address */

#define WDG_REG_ADDR_IRC0_UNLOCK ( (uint32 *) 0xB0400D30U )   /* IRC0 UNLOCK register address */
#define WDG_REG_ADDR_IRC0_CSR    ( (uint32 *) 0xB0400C98U )   /* IRC0 CSR register address */
#define WDG_REG_ADDR_IRC0_IRQHC  ( (uint32 *) 0xB0400C48U )   /* IRC0 IRQHC register address */
#define WDG_REG_ADDR_IRC0_NMIHC  ( (uint32 *) 0xB0400C40U )   /* IRC0 NMIHC register address */
#else
#define WDG_REG_ADDR_HWDG        ( (P2VAR(Wdg_66_IA_RegsType, WDG_CONST, REGSPACE)) &Wdg_66_IA_HWdgRegs )
#define WDG_REG_ADDR_SWDG        ( (P2VAR(Wdg_66_IA_RegsType, WDG_CONST, REGSPACE)) &Wdg_66_IA_SWdgRegs )

#define WDG_REG_ADDR_IRC0_UNLOCK ( (uint32 *) &Wdg_66_IA_IRC0_UNLOCKReg )
#define WDG_REG_ADDR_IRC0_CSR    ( (uint32 *) &Wdg_66_IA_IRC0_CSRReg )
#define WDG_REG_ADDR_IRC0_IRQHC  ( (uint32 *) &Wdg_66_IA_IRC0_IRQHCReg )
#define WDG_REG_ADDR_IRC0_NMIHC  ( (uint32 *) &Wdg_66_IA_IRC0_NMIHCReg )
#endif /* __MCAL_IO_DEFINE */

/*--------------------- Definition of configuration structure ---------------*/

/* Structure which depends on hardware architecture for initialization */
#define WDG_66_IA_CONFIGURATION_ARCH2 \
{ \
  { \
    0U,   /* RunLowPeriod */ \
    400000U,   /* RunUppPeriod */ \
    0U,   /* PssLowPeriod */ \
    400000U,   /* PssUppPeriod */ \
    60000U,   /* TmtFrqKhz */ \
    30000000U   /* TrgPeriod */ \
  }, \
  { \
    0U,   /* RunLowPeriod */ \
    400000U,   /* RunUppPeriod */ \
    0U,   /* PssLowPeriod */ \
    400000U,   /* PssUppPeriod */ \
    60000U,   /* TmtFrqKhz */ \
    30000000U   /* TrgPeriod */ \
  } \
} \

/* Structure which depends on hardware architecture for initialization */
#define WDG_66_IA_CONFIGURATION_ARCH_COMMON \
{ \
  { \
    WDGIF_SLOW_MODE,   /* Default mode */ \
    WDGIF_OFF_MODE,   /* Default mode in PSS */ \
    WDG_HWDG_UNIT,   /* Selected hwunit */ \
    1U,   /* Reset or NMI */ \
    0U,   /* Pre-warn is enabled or not */ \
    0U,   /* ResetDelay */ \
    SlowCRClock,   /* Clock selection */ \
    0U   /* WDG counter monitor output selection */ \
  }, \
  { \
    WDGIF_SLOW_MODE,   /* Default mode */ \
    WDGIF_OFF_MODE,   /* Default mode in PSS */ \
    WDG_SWDG_UNIT_0,   /* Selected hwunit */ \
    1U,   /* Reset or NMI */ \
    0U,   /* Pre-warn is enabled or not */ \
    0U,   /* ResetDelay */ \
    SlowCRClock,   /* Clock selection */ \
    0U   /* WDG counter monitor output selection */ \
  } \
} \

/* Structure which depends on hardware architecture for initialization */
#define WDG_66_IA_CONFIGURATION_ARCH_HWDG \
{ \
  { \
    (const Wdg_66_IA_SettingCommonType *) &Wdg_66_IA_SettingCommonData[0], \
    (const Wdg_66_IA_SettingSlowType *) &Wdg_66_IA_SettingSlowData[0], \
    (volatile Wdg_66_IA_RegsType * const *) &Wdg_66_IA_WdgRegs[0], \
    (Wdg_66_IA_IRCRegsType *) &Wdg_66_IA_IrcRegs \
  } \
} \

/* Structure which depends on hardware architecture for initialization */
#define WDG_66_IA_CONFIGURATION_ARCH_SWDG \
{ \
  { \
    (const Wdg_66_IA_SettingCommonType *) &Wdg_66_IA_SettingCommonData[1], \
    (const Wdg_66_IA_SettingSlowType *) &Wdg_66_IA_SettingSlowData[1], \
    (volatile Wdg_66_IA_RegsType * const *) &Wdg_66_IA_WdgRegs[1], \
    (Wdg_66_IA_IRCRegsType *) &Wdg_66_IA_IrcRegs \
  } \
} \

/* Structure which depends on hardware deliverable for initialization */
#define WDG_66_IA_CONFIGURATION_ARCH_DER2 \
{ \
  WDG_REG_ADDR_IRC0_UNLOCK, \
  WDG_REG_ADDR_IRC0_CSR, \
  WDG_REG_ADDR_IRC0_IRQHC, \
  WDG_REG_ADDR_IRC0_NMIHC \
} \

/* Structure which depends on hardware deliverable for initialization */
#define WDG_66_IA_CONFIGURATION_ARCH_DER \
{ \
  { \
    WDG_REG_ADDR_HWDG \
  }, \
  { \
    WDG_REG_ADDR_SWDG \
  }\
} \

/*==================[type definitions]=======================================*/
/*==================[external function declarations]=========================*/
/*==================[internal function declarations]=========================*/
/*==================[external constants]=====================================*/
/*==================[internal constants]=====================================*/
/*==================[external data]==========================================*/

/* Declaration of external variable for debugging */
#ifdef __MCAL_IO_DEFINE

#define WDG_START_SEC_VAR_NO_INIT_UNSPECIFIED
#include <MemMap.h>

extern volatile VAR( Wdg_66_IA_RegsType, REGSPACE ) Wdg_66_IA_HWdgRegs;
extern volatile VAR( Wdg_66_IA_RegsType, REGSPACE ) Wdg_66_IA_SWdgRegs;

#define WDG_STOP_SEC_VAR_NO_INIT_UNSPECIFIED
#include <MemMap.h>

#define WDG_START_SEC_VAR_NO_INIT_32
#include <MemMap.h>

extern volatile VAR( uint32, REGSPACE ) Wdg_66_IA_IRC0_UNLOCKReg;
extern volatile VAR( uint32, REGSPACE ) Wdg_66_IA_IRC0_CSRReg;
extern volatile VAR( uint32, REGSPACE ) Wdg_66_IA_IRC0_IRQHCReg;
extern volatile VAR( uint32, REGSPACE ) Wdg_66_IA_IRC0_NMIHCReg;

#define WDG_STOP_SEC_VAR_NO_INIT_32
#include <MemMap.h>

#endif /* __MCAL_IO_DEFINE */

/*==================[internal data]==========================================*/
/*==================[internal function definitions]==========================*/
/*==================[internal function definitions]==========================*/


#endif /* ifndef WDG_66_IA_CFG_ARCH_H */
/*==================[end of file]============================================*/
