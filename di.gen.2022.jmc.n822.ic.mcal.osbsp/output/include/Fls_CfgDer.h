#if !defined( FLS_CFGDER_H )
#define FLS_CFGDER_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains the all configuration declarations for
 ** the AUTOSAR module Fls that are target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL40-DRV
 **
 ** (c) 2014-2017, Cypress Semiconductor Corporation. All rights reserved.
 **
 ** Warranty and Disclaimer
 **
 ** This software product is property of Cypress Semiconductor Corporation or
 ** its subsidiaries.
 ** Any use and/or distribution rights for this software product are provided
 ** only under the Cypress Software License Agreement.
 ** Any use and/or distribution of this software product not in accordance with
 ** the terms of the Cypress Software License Agreement are unauthorized and
 ** shall constitute an infringement of Cypress intellectual property rights.
*/





/*==================[includes]==============================================*/

/*==================[macros]================================================*/


/** \brief macro for access to the memory map */
#define FLS_NUMBER_OF_SECTORS  14U

/** \brief flag value for specifying verification to do */
#define FLS_VERIFICATION_FLAG  (FLS_ERASE_VERIFICATION | \
                                FLS_BEFORE_WRITE_VERIFICATION | \
                                FLS_WRITE_VERIFICATION)

/** \brief Compile switch to enable / disable the function of disabling ECC for reading.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_ECC_DISABLING_API  STD_ON

/* macros for FlsSub (HAL) */

#define FLS_USE_DMA                 FLS_TRUE
#define FLS_DMA_CH                  0U
#define FLS_DMA_CH_PN               1U
#define FLS_NUMBER_OF_DELAY_LOOP    0UL

/* const variables macro for DMA registers access address */
#define FLS_DMA0_CHANNEL_OFFSET     (0x40UL)
#define FLS_DMA0_CMCHIC_OFFSET      (0x04UL)

/* number of bytes to be written at once */
#define FLS_PAGE_SIZE               (8UL)

/* size of sector */
#define FLS_SECTOR_SIZE             (0x2000U)

/* maximum time (plus margin) to erase one complete flash sector in milli seconds */
#if FLS_SECTOR_SIZE == 0x2000U
#define FLS_ERASE_TIME              1200U
#else
#define FLS_ERASE_TIME              520U
#endif

#if !defined( __MCAL_IO_DEFINE )

/* WorkFlash registers access address */
#define FLS_WFCFG_BASE_ADDR         (0xB0412000UL)
/* DMA registers access address */
#define FLS_DMA0_CHANNEL0_BASE_ADDR (0xB4700000UL)
#define FLS_DMA0_R_ADDR             (0xB4701000UL)
#define FLS_DMA0_CMICIC_ADDR        (0xB4702024UL)
#define FLS_DMA0_CMCHIC0_BASE_ADDR  (0xB4702800UL)
/* physical top address of flash memory */
#define FLS_FLASH_TOP_PHYSICAL_ADDRESS  (0x0E000000UL)

#else

/* Dummy registers access address */
#define FLS_DUMMY_REGAREA_SIZE  (0x80+0x400+0x20+0x40)

#define FLS_WFCFG_BASE_ADDR         ((uint8 *)(&Fls_DummyRegArea[0x0   >> 2])) /* 0xB0412000 - 0xB041207F */
#define FLS_DMA0_CHANNEL0_BASE_ADDR ((uint8 *)(&Fls_DummyRegArea[0x80  >> 2])) /* 0xB4700000 - 0xB47003E3 */
#define FLS_DMA0_R_ADDR             ((uint8 *)(&Fls_DummyRegArea[0x480 >> 2])) /* 0xB4701000 - 0xB4701017 */
#define FLS_DMA0_CMICIC_ADDR        ((uint8 *)(&Fls_DummyRegArea[0x498 >> 2])) /* 0xB4702024 - 0xB4702027 */
#define FLS_DMA0_CMCHIC0_BASE_ADDR  ((uint8 *)(&Fls_DummyRegArea[0x4A0 >> 2])) /* 0xB4702800 - 0xB470283F */
/* start address of flash memory */
#define FLS_FLASH_TOP_PHYSICAL_ADDRESS  ((FLS_ULONG)(&Fls_DummyFlash[0]))

#endif /* if !defined( __MCAL_IO_DEFINE ) */

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define FLS_START_SEC_CODE
#include <MemMap.h>

/** \brief Fls_GetWfregBaseAddr
 **
 ** Gets WorkFlash registers base address.
 **
 ** \return     WorkFlash registers base address (i.e. WFCFG_CPR register address)
 **
 */
extern volatile FUNC_P2VAR(uint32, REGSPACE, AUTOMATIC) Fls_GetWfregBaseAddr(void);

/** \brief Fls_GetDmaiR
 **
 ** Gets DMA0_R register address.
 **
 ** \return     DMA0_R register address
 **
 */
extern volatile FUNC_P2VAR(uint32, REGSPACE, AUTOMATIC) Fls_GetDmaiR(void);

/** \brief Fls_GetDmaiCmicicm
 **
 ** Gets DMA0_CMICICm register address.
 **
 ** \return     DMA0_CMICICm register address
 **
 */
extern volatile FUNC_P2VAR(uint32, REGSPACE, AUTOMATIC) Fls_GetDmaiCmicicm(void);

/** \brief Fls_GetDmaiChannelnBaseAddr
 **
 ** Gets DMA Controller Channel Configuration registers base address.
 **
 ** \return     DMA Controller Channel Configuration registers base address (i.e. DMA0_An register address)
 **
 */
extern volatile FUNC_P2VAR(uint32, REGSPACE, AUTOMATIC) Fls_GetDmaiChannelnBaseAddr(void);

/** \brief Fls_GetDmaiCmchicn
 **
 ** Gets DMA0_CMCHICn register address.
 **
 ** \return     DMA0_CMCHICn register address
 **
 */
extern volatile FUNC_P2VAR(uint32, REGSPACE, AUTOMATIC) Fls_GetDmaiCmchicn(void);

/** \brief Fls_GetDmaiBnPnValue
 **
 ** Gets value of priority number for DMA transfer.
 **
 ** \return     value of priority number for DMA transfer
 **
 */
extern FUNC(uint8, FLS_CODE) Fls_GetDmaiBnPnValue(void);

/** \brief Fls_GetUseDma
 **
 ** Gets value of FlsUseDma configuration for writing.
 **
 ** \return     value of FlsUseDma configuration for writing
 ** \retval     FLS_TRUE        use of DMA for writing (DMA transfer)
 **             FLS_FALSE       no use of DMA for writing (CPU transfer)
 **
 */
extern FUNC(uint8,  FLS_CODE) Fls_GetUseDma(void);

/** \brief Fls_GetNumberOfDelayLoop
 **
 ** Gets value of FlsNumberOfDelayLoop configuration for writing.
 **
 ** \return     value of FlsNumberOfDelayLoop configuration for writing
 **
 */
extern FUNC(uint32, FLS_CODE) Fls_GetNumberOfDelayLoop(void);

#define FLS_STOP_SEC_CODE
#include <MemMap.h>

/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

#define FLS_START_SEC_VAR_NO_INIT_UNSPECIFIED
#include <MemMap.h>

#if defined( __MCAL_IO_DEFINE )

TS_STATIC_VAR uint32 Fls_DummyRegArea[FLS_DUMMY_REGAREA_SIZE >> 2];

extern uint8 Fls_DummyFlash[FLS_NUMBER_OF_SECTORS * FLS_SECTOR_SIZE];

#endif /* if defined( __MCAL_IO_DEFINE ) */

#define FLS_STOP_SEC_VAR_NO_INIT_UNSPECIFIED
#include <MemMap.h>

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/



#endif /* if !defined( FLS_CFGDER_H ) */
/*==================[end of file]===========================================*/
