
/** \brief AUTOSAR SPI Driver
 **
 ** This file contains definitions for configuration.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL40-DRV
 **
 ** (c) 2016-2017, Cypress Semiconductor Corporation. All rights reserved.
 **
 ** Warranty and Disclaimer
 **
 ** This software product is property of Cypress Semiconductor Corporation or
 ** its subsidiaries.
 ** Any use and/or distribution rights for this software product are provided
 ** only under the Cypress Software License Agreement.
 ** Any use and/or distribution of this software product not in accordance with
 ** the terms of the Cypress Software License Agreement are unauthorized and
 ** shall constitute an infringement of Cypress intellectual property rights.
 */

#ifndef SPI_CFG_H_INCLUDED
#define SPI_CFG_H_INCLUDED

/*==================[inclusions]============================================*/

#include <Os.h>
#include <Spi_Types.h>


#include <Dio.h>



#include <ErrorCalloutHandler.h>
#include <Spi_Cbk.h>

/*==================[macros]================================================*/

/*------------------[Cypress module config version identification]---------*/

#if (defined SPI_CFG_MAJOR_VERSION) /* to prevent double declaration */
#error SPI_CFG_MAJOR_VERSION already defined
#endif /* if (defined SPI_CFG_MAJOR_VERSION) */

/** Driver config major version */
#define SPI_CFG_MAJOR_VERSION 1U


#if (defined SPI_CFG_MINOR_VERSION) /* to prevent double declaration */
#error SPI_CFG_MINOR_VERSION already defined
#endif /* if (defined SPI_CFG_MINOR_VERSION) */

/** Driver config minor version */
#define SPI_CFG_MINOR_VERSION 1U


#if (defined SPI_CFG_PATCH_VERSION) /* to prevent double declaration */
#error SPI_CFG_PATCH_VERSION already defined
#endif /* if (defined SPI_CFG_PATCH_VERSION) */

/** Driver config patch version */
#define SPI_CFG_PATCH_VERSION 3U


/* SPI feature definitions */

#define SPI_LEVEL_DELIVERED 2U

#define SPI_SUPPORT_CONCURRENT_SYNC_TRANSMIT SPI_FALSE

#define SPI_CHANNEL_BUFFERS_ALLOWED 1U

#define SPI_DEV_ERROR_DETECT STD_ON

#define SPI_CANCEL_API STD_ON

#define SPI_VERSION_INFO_API STD_ON

#define SPI_HW_STATUS_API STD_ON

#define SPI_INTERRUPTIBLE_SEQ_ALLOWED STD_OFF

#define SPI_CS_GPIO_USED  STD_ON


/** This parameter defines the existence and the name of a callout function that is
 called each time an error was detected.
 The function has to have the following parameters: (ModuleId: uint16,
 InstanceId: uint8, ApiId: uint8, ErrorId: uint8) */
#define SPI_ERROR_CALLOUT_FUNCTION ErrorCalloutHandler

/** \brief maximum size of sequence transmit queue
 **
 ** this is the maximum number of sequences pending at a given time.
 ** only valid for level 1 or level 2.
 ** */
#define SPI_QUEUE_ITEM_MAX 1U


/** symbolic names for channels */

/* symbolic name of SpiChannel_TT */
#define SpiChannel_TT                     ((Spi_ChannelType) 0U)
#define Spi_SpiChannel_TT                 ((Spi_ChannelType) 0U)
#define SpiConf_SpiChannel_SpiChannel_TT  ((Spi_ChannelType) 0U)

/* overall number of channels */
#define SPI_MAX_CHANNEL  ((Spi_ChannelType) 1U)

/*------------------[channels]--------------------------------------------- */

#define SPI_CHANNEL_CONFIG \
{ \
  { /* SpiChannel_TT */ \
    (P2VAR(Spi_DataType, AUTOMATIC, SPI_APPL_DATA))NULL_PTR, /* RxBufferPtr */ \
    (P2VAR(Spi_DataType, AUTOMATIC, SPI_APPL_CONST))NULL_PTR, /* TxBufferPtr */ \
    0xffU, /* DefaultData */ \
    5U, /* BufferSize */ \
    SPI_CHANNEL_TYPE_EB, /* ChannelType */ \
    SPI_TRANSFER_START_MSB, /* TransferStart */ \
    1U, /* DataWidth */ \
    SPI_MFSI_DATA_WIDTH_8, /* DataWidthBitMask */ \
    SPI_FALSE, /* AlignedBuffer */ \
    0U /* Channel Id */ \
  }  \
}

#define SPI_CHANNEL_INFO_DEFAULT \
{ \
  { /* SpiChannel_TT */ \
    (P2VAR(Spi_DataType, AUTOMATIC, SPI_APPL_DATA))NULL_PTR, /* RxBufferPtr */ \
    (P2VAR(Spi_DataType, AUTOMATIC, SPI_APPL_CONST))NULL_PTR, /* TxBufferPtr */ \
    1U, /* BufferSize */ \
    0U,  /* BufferPosStoredForSend */ \
    0U   /* BufferPosReceived */ \
  } \
}

/** symbolic names for jobs */

/* symbolic name of SpiJob_TT */
#define SpiJob_TT                 ((Spi_JobType) 0U)
#define Spi_SpiJob_TT             ((Spi_JobType) 0U)
#define SpiConf_SpiJob_SpiJob_TT  ((Spi_JobType) 0U)

/* overall number of jobs */
#define SPI_MAX_JOB  ((Spi_JobType) 1U)
/* overall number of external devices */
#define SPI_MAX_EXTERNAL_DEVICE  ((uint8) 1U)

/** Number of different SPI peripherals available and handled by this module.
 ** [SPI094]
 **
 */
#define SPI_MAX_HW_UNIT  1U

/** Specifies the identification (ID) for a SPI Hardware microcontroller
 ** peripheral.
 **
 */

/** symbolic names for hardware units */

#define SPI_MFS00  ((Spi_HWUnitType) 0U)


/*------------------[external device configuration]--- */

#define SPI_EXTERNAL_DEVICE_CONFIG \
{ \
  { /* SpiExternalDevice_TT */ \
    DioConf_DioChannel_DIO_MDO_SHIFT_RCK,  /* chip select id */ \
    SPI_TRUE, /* use chip select */ \
    STD_LOW, /* chip select polarity */ \
    299U, /* baudrate register setting (baud rate expected:200000; supported:200000)*/ \
    STD_LOW,   /* shift clock idle level */ \
    SPI_DATA_SHIFT_EDGE_LEADING, \
    0U,  /* chip select divider */ \
    0U,     /* chip select wait timing */ \
    0U,  /* chip select setup delay */ \
    0U,  /* chip select hold delay */ \
    0U,  /* chip deselect timing */ \
    SPI_MFS00,  /* HW unit */ \
    SPI_FALSE, /* using fifo or not */ \
    SPI_FALSE, /* using dma or not */ \
    SPI_CS_VIA_GPIO/* chip select handling method */ \
  } \
}

/*------------------[job configuration]--- */

#define SPI_JOB_CONFIG \
{ \
  { /* SpiJob_TT */ \
    Spi_JCh_SpiJob_TT,  /* ChannelListPtr */ \
    NULL_PTR,  /* JobEndNotification */ \
    &Spi_ExternalDeviceConfig[0U], /* ExternalDevicePtr */ \
    0U, /* Job Id */ \
    0U,  /* JobPriority */ \
    1U,  /* ChannelCount */ \
    SPI_HWUNIT_SYNC  /* HwUnitSync */ \
  } \
}


/** symbolic names for sequences */

/* symbolic name of SpiSequence_TT */
#define SpiSequence_TT                      ((Spi_SequenceType) 0U)
#define Spi_SpiSequence_TT                  ((Spi_SequenceType) 0U)
#define SpiConf_SpiSequence_SpiSequence_TT  ((Spi_SequenceType) 0U)

/* overall number of sequences */
#define SPI_MAX_SEQUENCE  ((Spi_SequenceType) 1U)

/*------------------[sequences]-------------------------------------------- */

#define SPI_SEQUENCE_CONFIG \
{ \
  { /* SpiSequence_TT */ \
    Spi_SJb_SpiSequence_TT, /* JobListPtr */ \
    NULL_PTR, /* SeqEndNotification */ \
    &Spi_SpiSequence_TT_SharedHwUnitSeqList[0], /* SharedHwUnitSeqListPtr */ \
    1U, /* JobCount */ \
    SPI_SpiSequence_TT_SHARED_HW_UNIT_SEQ_COUNT,     /* SharedHwUnitSeqCount */ \
    SPI_FALSE, /* InterruptibleSequence */ \
    0U /* Sequence Id */ \
  }  \
}


/* The DemEventParameter */
#define SPI_DEM_E_HW_ERROR STD_OFF
#define SPI_INTERNAL_E_HW_ERROR SPI_E_HARDWARE_ERROR


#define  SPI_SpiSequence_TT_SHARED_HW_UNIT_SEQ_COUNT   1U
#define  SPI_SpiSequence_TT_SHARED_HW_UNIT_SEQ_LIST { \
  0U \
}

/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define SPI_START_SEC_CODE
/* MISRA-C:2004 Rule 19.1 deviation: MemMap.h must be included in-line. */ /* PRQA S 5087 1 */
#include <MemMap.h>





/** \brief Spi_MainFunction_Handling
 **
 ** Scheduled function that polls the SPI interrupt flags for advancing the transmission state machine.
 ** Only available if SPI_LEVEL_DELIVERED is 2.
 ** The function is only called if the transmission mode is set to SPI_POLLING_MODE using Spi_SetAsyncMode().
 **
 */
extern FUNC(void, SPI_CODE) Spi_MainFunction_Handling(void);

#define SPI_STOP_SEC_CODE
/* MISRA-C:2004 Rule 19.1 deviation: MemMap.h must be included in-line. */ /* PRQA S 5087 1 */
#include <MemMap.h>


/*==================[external constants]====================================*/

/*==================[external data]=========================================*/
#define SPI_START_SEC_CONST_UNSPECIFIED
/* MISRA-C:2004 Rule 19.1 deviation: MemMap.h must be included in-line. */ /* PRQA S 5087 1 */
#include <MemMap.h>

/** Global configuration for SPI driver */
extern CONST(Spi_ConfigType, SPI_CONST) Spi_Config;

/** Global information for SPI driver */
extern CONST(Spi_InfoType, SPI_VAR) Spi_Info;

#define SPI_STOP_SEC_CONST_UNSPECIFIED
/* MISRA-C:2004 Rule 19.1 deviation: MemMap.h must be included in-line. */ /* PRQA S 5087 1 */
#include <MemMap.h>

#endif /*!defined(SPI_CFG_H_INCLUDED)*/

/*==================[end of file]===========================================*/
