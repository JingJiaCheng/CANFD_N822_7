#if !defined( FLS_CFG_H )
#define FLS_CFG_H

/** \brief AUTOSAR Fls Flash Driver
 **
 ** This file contains the all configuration declarations for
 ** the AUTOSAR module Fls that are target independent.
 **
 ** Do not edit this file manually.
 ** Any change might compromise the safety integrity level of
 ** the software partition it is contained in.
 **
 ** Product: SW-MCAL40-DRV
 **
 ** (c) 2014-2017, Cypress Semiconductor Corporation. All rights reserved.
 **
 ** Warranty and Disclaimer
 **
 ** This software product is property of Cypress Semiconductor Corporation or
 ** its subsidiaries.
 ** Any use and/or distribution rights for this software product are provided
 ** only under the Cypress Software License Agreement.
 ** Any use and/or distribution of this software product not in accordance with
 ** the terms of the Cypress Software License Agreement are unauthorized and
 ** shall constitute an infringement of Cypress intellectual property rights.
*/

/*==================[includes]==============================================*/

#include <MemIf_Types.h>           /* AUTOSAR standard types */
#include <ErrorCalloutHandler.h>
#include <Fee_Cbk.h>

/*==================[macros]================================================*/

#define FLS_GEN_MODULE_ID                   92U
#define FLS_GEN_VENDOR_ID                   66U
#define FLS_GEN_AR_RELEASE_MAJOR_VERSION    4U
#define FLS_GEN_AR_RELEASE_MINOR_VERSION    0U
#define FLS_GEN_AR_RELEASE_REVISION_VERSION 3U
#define FLS_GEN_SW_MAJOR_VERSION            1U
#define FLS_GEN_SW_MINOR_VERSION            0U
#define FLS_GEN_SW_PATCH_VERSION            26U

/* Several parameters shall be located in the file Fls_Cfg.h */

/** \brief FLS Driver DriverIndex Symbolic Name */
#define Fls_FlsGeneral      0
#define FlsConf_FlsGeneral  0

/** \brief Job processing triggered by hardware interrupt
 ** Note: This is not used in the current implementation
 **
 ** ON  Job processing triggered by interrupt
 ** OFF Job processing not triggered by interrupt
 */
#define FLS_USE_INTERRUPTS   STD_OFF

/** \brief The total amount of flash memory in bytes
 ** This parameter in conjunction with FLS_BASE_ADDRESS defines
 ** the upper boundary for read/write/erase and compare jobs.
  */
                                                                                    
#define FLS_TOTAL_SIZE       114688UL

/** \brief The flash driver shall load the flash access code to
 ** RAM whenever an erase or write job is started and unload
 ** (overwrite) it after that job has been finished or canceled.
 ** Note: This is not used in the current implementation
 **
 ** ON  Flash access code loaded on job start / unloaded on job end or error
 ** OFF Flash access code not loaded to / unloaded from RAM at all
  */
#define FLS_AC_LOAD_ON_JOB_START   STD_OFF

/** \brief Compile switch to enable / disable the version information.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_VERSION_INFO_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_Cancel function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_CANCEL_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_Compare function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_COMPARE_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_SetMode function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_SET_MODE_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_GetStatus function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_GET_STATUS_API   STD_ON

/** \brief Compile switch to enable / disable the Fls_GetJobResult function.
 **
 ** ON  API supported
 ** OFF API not supported
  */
#define FLS_GET_JOB_RESULT_API   STD_ON

/** \brief Compile switch to enable / disable the development error detection and reporting.
 **
 ** ON  Development error detection enabled
 ** OFF Development error detection disabled
  */
#define FLS_DEV_ERROR_DETECT   STD_ON

/** \brief Compile switch to enable / disable report of the status for error FLS_E_ERASE_FAILED to the DEM.
 **
 ** ON  Report of the status for error enabled
 ** OFF Report of the status for error disabled
  */
#define FLS_E_ERASE_FAIL   STD_OFF

/** \brief Compile switch to enable / disable report of the status for error FLS_E_WRITE_FAILED to the DEM.
 **
 ** ON  Report of the status for error enabled
 ** OFF Report of the status for error disabled
  */
#define FLS_E_WRITE_FAIL   STD_OFF

/** \brief Compile switch to enable / disable report of the status for error FLS_E_READ_FAILED to the DEM.
 **
 ** ON  Report of the status for error enabled
 ** OFF Report of the status for error disabled
  */
#define FLS_E_READ_FAIL   STD_OFF

/** \brief Compile switch to enable / disable report of the status for error FLS_E_COMPARE_FAILED to the DEM.
 **
 ** ON  Report of the status for error enabled
 ** OFF Report of the status for error disabled
  */
#define FLS_E_COMPARE_FAIL   STD_OFF

/** This parameter defines the existence and the name of a callout function that is
 ** called each time an error was detected.
 ** The function has to have the following parameters: (ModuleId: uint16,
 ** InstanceId: uint8, ApiId: uint8, ErrorId: uint8)
*/
#define FLS_ERROR_CALLOUT_FUNCTION   ErrorCalloutHandler


/* The DemEventParameter */




/*==================[type definitions]======================================*/

/*==================[external function declarations]========================*/

#define FLS_START_SEC_CODE
#include <MemMap.h>

/** \brief Fls_WdgClear
 **
 ** This function is implemented for clearing (triggering) the watchdog timer by user.
 ** 
 ** \return    none
 **
 */
extern FUNC(void, FLS_CODE) Fls_WdgClear(void);

/** \brief Fls_GetConfig
 **
 ** Gets address to configuration.
 **
 ** \return     Configuration address
 **
 */
extern FUNC_P2CONST(Fls_ConfigType, FLS_APPL_DATA, AUTOMATIC) Fls_GetConfig(void);

/** \brief Fls_GetMemoryMap
 **
 ** Gets address to memory map.
 **
 ** \return     Memory map address
 **
 */
extern FUNC_P2CONST(Fls_MemoryMapType, FLS_APPL_DATA, AUTOMATIC) Fls_GetMemoryMap(void);

#define FLS_STOP_SEC_CODE
#include <MemMap.h>


/*==================[internal function declarations]========================*/

/*==================[external constants]====================================*/

/*==================[internal constants]====================================*/

/*==================[external data]=========================================*/

/*==================[internal data]=========================================*/

/*==================[external function definitions]=========================*/

/*==================[internal function definitions]=========================*/



#endif /* if !defined( FLS_CFG_H ) */
/*==================[end of file]===========================================*/
